{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Suraj Datalab Documentation","text":"<p><code>Suraj Datalab</code> is a powerful Python package designed to streamline data analysis tasks. This package provides a set of tools for data cleaning, feature analysis, and preparing datasets for machine learning models. Whether you're dealing with categorical data, numerical data, or need to create folds for cross-validation, <code>Suraj Datalab</code> has you covered.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#data-analysis","title":"Data Analysis","text":"<ul> <li>Categorical Feature Analysis: Analyze the distribution of categorical features with respect to a target variable.</li> <li>Numerical Feature Analysis: Explore the distribution of numerical features, including outlier detection and visualization.</li> </ul>"},{"location":"#data-cleaning","title":"Data Cleaning","text":"<ul> <li>Missing Values Summary: Quickly generate a summary of missing values in your dataset.</li> <li>Rare Category Replacement: Automatically identify and replace rare categories in your data to ensure robust models.</li> </ul>"},{"location":"#cross-validation-preparation","title":"Cross-Validation Preparation","text":"<ul> <li>K-Folds Creation: Easily create standard K-Folds for cross-validation.</li> <li>Stratified K-Folds for Classification: Ensure balanced folds in classification tasks by using stratified K-Folds.</li> <li>Stratified K-Folds for Regression: Create stratified K-Folds for regression tasks using various binning methods.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with <code>Suraj Datalab</code>, check out the Usage Guide, which provides detailed examples and instructions on how to use each function in the package.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>Suraj Datalab</code> by cloning the repository and installing the required dependencies:</p> <pre><code>git clone https://github.com/yourusername/suraj_datalab.git\ncd suraj_datalab\npip install -r requirements.txt\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Usage Guide</li> <li>API Reference</li> <li>Examples</li> </ul> <p>For more detailed information about each function and how to use it, refer to the API Reference.</p>"},{"location":"#learn-more","title":"Learn More","text":"<p>For detailed usage instructions, please visit the Usage Guide.</p> <p>For more information about my work, other projects, or to get in touch, visit my personal website</p> <p>If you have any feedback or suggestions, feel free to open an issue on GitHub.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This document provides a detailed reference for all the classes and functions available in the <code>suraj_datalab</code> package.</p>"},{"location":"api_reference/#modules","title":"Modules","text":"<ul> <li>analyze</li> <li>clean</li> <li>fold_creator</li> </ul>"},{"location":"api_reference/#analyze-module","title":"Analyze Module","text":""},{"location":"api_reference/#categorical_featuredf-feature-target","title":"<code>categorical_feature(df, feature, target)</code>","text":"<p>Analyze the distribution of a categorical feature with respect to a target variable.</p> <p>Parameters:</p> <ul> <li><code>df (pandas.DataFrame)</code>: The input DataFrame.</li> <li><code>feature (str)</code>: The name of the categorical feature to analyze.</li> <li><code>target (str)</code>: The name of the target variable.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: A DataFrame containing the distribution of the feature with respect to the target.</li> </ul>"},{"location":"api_reference/#numerical_featuredf-feature-targetnone-figsize15-6-binssturges","title":"<code>numerical_feature(df, feature, target=None, figsize=(15, 6), bins=\"sturges\")</code>","text":"<p>Analyze the distribution of a numerical feature, with optional grouping by a target variable.</p> <p>Parameters:</p> <ul> <li><code>df (pandas.DataFrame)</code>: The input DataFrame.</li> <li><code>feature (str)</code>: The name of the numerical feature to analyze.</li> <li><code>target (str, optional)</code>: The name of the target column for grouping the analysis. Default is <code>None</code>.</li> <li><code>figsize (tuple, optional)</code>: The size of the figure. Default is <code>(15, 6)</code>.</li> <li><code>bins (int or str, optional)</code>: The number of bins or the method to calculate them. Default is <code>\"sturges\"</code>.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: A DataFrame containing outlier percentages and summary statistics.</li> </ul>"},{"location":"api_reference/#missing_valuesdataframe","title":"<code>missing_values(dataframe)</code>","text":"<p>Generate a summary of missing values in the DataFrame.</p> <p>Parameters:</p> <ul> <li><code>dataframe (pandas.DataFrame)</code>: The input DataFrame.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: A DataFrame containing missing values count, percentage, and data types for columns with missing values.</li> </ul>"},{"location":"api_reference/#clean-module","title":"Clean Module","text":""},{"location":"api_reference/#rarecategoryreplacercolumns-proportion_threshold002-replacement_valueothers","title":"<code>RareCategoryReplacer(columns, proportion_threshold=0.02, replacement_value=\"Others\")</code>","text":"<p>Class for replacing rare categories in specified columns of a DataFrame.</p> <p>Parameters:</p> <ul> <li><code>columns (list)</code>: List of column names to apply the rare category replacement.</li> <li><code>proportion_threshold (float, optional)</code>: Threshold below which a category is considered rare. Default is <code>0.02</code>.</li> <li><code>replacement_value (str, optional)</code>: Value to replace rare categories with. Default is <code>\"Others\"</code>.</li> </ul> <p>Attributes:</p> <ul> <li><code>rare_categories_ (dict)</code>: Dictionary containing the rare categories for each specified column.</li> <li><code>important_categories_ (dict)</code>: Dictionary containing the important categories for each specified column.</li> </ul> <p>Methods:</p> <ul> <li><code>fit(X, y=None)</code>: Fit the transformer by calculating rare categories.</li> <li><code>transform(X)</code>: Transform the data by replacing rare categories.</li> <li><code>fit_transform(X, y=None)</code>: Fit and transform the data in a single step.</li> </ul>"},{"location":"api_reference/#fold-creator-module","title":"Fold Creator Module","text":""},{"location":"api_reference/#create_kfoldsfile_path-n_splits5-shuffletrue-random_state42-save_pathnone","title":"<code>create_kfolds(file_path, n_splits=5, shuffle=True, random_state=42, save_path=None)</code>","text":"<p>Create K-Fold indices for a dataset loaded from a CSV file.</p> <p>Parameters:</p> <ul> <li><code>file_path (str)</code>: Path to the input CSV file.</li> <li><code>n_splits (int, optional)</code>: Number of folds. Default is <code>5</code>.</li> <li><code>shuffle (bool, optional)</code>: Whether to shuffle the data. Default is <code>True</code>.</li> <li><code>random_state (int, optional)</code>: Seed for the random number generator. Default is <code>42</code>.</li> <li><code>save_path (str, optional)</code>: Path to save the CSV file. If <code>None</code>, the file is not saved.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: DataFrame with an additional <code>kfold</code> column.</li> </ul>"},{"location":"api_reference/#create_classification_kfoldsfile_path-target_column-n_splits5-random_state42-save_pathnone","title":"<code>create_classification_kfolds(file_path, target_column, n_splits=5, random_state=42, save_path=None)</code>","text":"<p>Create stratified K-Fold indices for classification tasks from a CSV file.</p> <p>Parameters:</p> <ul> <li><code>file_path (str)</code>: Path to the input CSV file.</li> <li><code>target_column (str)</code>: The name of the target column.</li> <li><code>n_splits (int, optional)</code>: Number of folds. Default is <code>5</code>.</li> <li><code>random_state (int, optional)</code>: Seed for the random number generator. Default is <code>42</code>.</li> <li><code>save_path (str, optional)</code>: Path to save the CSV file. If <code>None</code>, the file is not saved.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: DataFrame with an additional <code>kfold</code> column.</li> </ul>"},{"location":"api_reference/#create_regression_kfoldsfile_path-target_column-n_splits5-binning_methodsturges-custom_binsnone-random_state42-save_pathnone","title":"<code>create_regression_kfolds(file_path, target_column, n_splits=5, binning_method=\"sturges\", custom_bins=None, random_state=42, save_path=None)</code>","text":"<p>Create stratified K-Fold indices for regression tasks using various binning methods from a CSV file.</p> <p>Parameters:</p> <ul> <li><code>file_path (str)</code>: Path to the input CSV file.</li> <li><code>target_column (str)</code>: The name of the target column.</li> <li><code>n_splits (int, optional)</code>: Number of folds. Default is <code>5</code>.</li> <li><code>binning_method (str, optional)</code>: Method for binning the target variable. Options: <code>'sturges'</code>, <code>'quantile'</code>, <code>'kmeans'</code>, <code>'custom'</code>. Default is <code>'sturges'</code>.</li> <li><code>custom_bins (list, optional)</code>: List of bin edges for custom binning. Required if <code>binning_method</code> is <code>'custom'</code>.</li> <li><code>random_state (int, optional)</code>: Seed for the random number generator. Default is <code>42</code>.</li> <li><code>save_path (str, optional)</code>: Path to save the CSV file. If <code>None</code>, the file is not saved.</li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>: DataFrame with an additional <code>kfold</code> column.</li> </ul>"},{"location":"api_reference/#learn-more","title":"Learn More","text":"<p>For detailed usage instructions, please visit the Usage Guide.</p> <p>For more information about my work, other projects, or to get in touch, visit my personal website</p> <p>If you have any feedback or suggestions, feel free to open an issue on GitHub.</p>"},{"location":"examples/","title":"Examples","text":"<p>This document provides practical examples of how to use the <code>suraj_datalab</code> package. Each example demonstrates a specific feature, complete with sample code and expected outputs.</p>"},{"location":"examples/#example-1-analyzing-a-categorical-feature","title":"Example 1: Analyzing a Categorical Feature","text":""},{"location":"examples/#scenario","title":"Scenario","text":"<p>You have a dataset with a categorical feature, and you want to analyze its distribution with respect to a target variable.</p>"},{"location":"examples/#code","title":"Code","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Sample DataFrame\ndata = {\n    'Category': ['A', 'B', 'A', 'C', 'B', 'A', 'C', 'A'],\n    'Target': [1, 0, 1, 0, 1, 0, 0, 1]\n}\ndf = pd.DataFrame(data)\n\n# Analyze the categorical feature\ndistribution = analyze.categorical_feature(df, 'Category', 'Target')\nprint(distribution)\n</code></pre>"},{"location":"examples/#expected-output","title":"Expected Output","text":"<pre><code>  Total Count  Total Percentage  0 of Total (%)  1 of Total (%)  0 within Category (%)  1 within Category (%)\nA            4              50.0            25.0            75.0                  25.0                  75.0\nB            2              25.0            50.0            50.0                  50.0                  50.0\nC            2              25.0            75.0            25.0                  75.0                  25.0\n</code></pre> <p>A plot showing the distribution of the <code>Category</code> feature by the <code>Target</code> variable will also be generated.</p>"},{"location":"examples/#example-2-analyzing-a-numerical-feature","title":"Example 2: Analyzing a Numerical Feature","text":""},{"location":"examples/#scenario_1","title":"Scenario","text":"<p>You want to analyze the distribution of a numerical feature, identify outliers, and visualize the data.</p>"},{"location":"examples/#code_1","title":"Code","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Sample DataFrame\ndata = {\n    'NumericalFeature': [10, 12, 10, 22, 23, 45, 47, 50],\n    'Target': [1, 1, 0, 0, 1, 1, 0, 0]\n}\ndf = pd.DataFrame(data)\n\n# Analyze the numerical feature\noutliers_df, summary_df = analyze.numerical_feature(df, 'NumericalFeature', 'Target')\nprint(outliers_df)\nprint(summary_df)\n</code></pre>"},{"location":"examples/#expected-output_1","title":"Expected Output","text":"<pre><code>   Outlier Percentage  Lower Outliers Percentage  Upper Outliers Percentage\n0                 25.0                        0.0                       25.0\n\n         count  mean  std   min   25%   50%   75%   max\nOverall     8  27.375  18.518  10.0  12.5  22.5  46.5  50.0\nLower_Outliers 0  NaN   NaN    NaN   NaN   NaN   NaN   NaN\nUpper_Outliers 2  48.5   1.5  47.0  47.75  48.5  49.25  50.0\n</code></pre> <p>Histograms and boxplots for the <code>NumericalFeature</code> will be generated.</p>"},{"location":"examples/#example-3-handling-missing-values","title":"Example 3: Handling Missing Values","text":""},{"location":"examples/#scenario_2","title":"Scenario","text":"<p>You have a dataset with missing values and want to generate a summary.</p>"},{"location":"examples/#code_2","title":"Code","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Sample DataFrame\ndata = {\n    'Feature1': [1, 2, None, 4, 5],\n    'Feature2': [None, 2, 3, 4, None],\n    'Feature3': [1, None, 3, None, 5]\n}\ndf = pd.DataFrame(data)\n\n# Get missing values summary\nmissing_summary = analyze.missing_values(df)\nprint(missing_summary)\n</code></pre>"},{"location":"examples/#expected-output_2","title":"Expected Output","text":"<pre><code>          Missing Count  Missing Percentage  Data Type\nFeature1              1                20.0    float64\nFeature2              2                40.0    float64\nFeature3              2                40.0    float64\n</code></pre>"},{"location":"examples/#example-4-replacing-rare-categories","title":"Example 4: Replacing Rare Categories","text":""},{"location":"examples/#scenario_3","title":"Scenario","text":"<p>You need to replace rare categories in your dataset with a specified value.</p>"},{"location":"examples/#code_3","title":"Code","text":"<pre><code>import pandas as pd\nfrom suraj_datalab.clean import RareCategoryReplacer\n\n# Sample DataFrame\ndata = {\n    'Category': ['A', 'B', 'C', 'A', 'B', 'A', 'C', 'D', 'E', 'F', 'A'],\n}\ndf = pd.DataFrame(data)\n\n# Define the columns to replace rare categories in\ncolumns_to_replace = ['Category']\n\n# Create an instance of the RareCategoryReplacer\nreplacer = RareCategoryReplacer(columns=columns_to_replace, proportion_threshold=0.2, replacement_value=\"Others\")\n\n# Fit and transform the dataset\ndf_transformed = replacer.fit_transform(df)\nprint(df_transformed)\n</code></pre>"},{"location":"examples/#expected-output_3","title":"Expected Output","text":"<pre><code>  Category\n0        A\n1        B\n2    Others\n3        A\n4        B\n5        A\n6    Others\n7    Others\n8    Others\n9    Others\n10       A\n</code></pre>"},{"location":"examples/#example-5-creating-k-folds","title":"Example 5: Creating K-Folds","text":""},{"location":"examples/#scenario_4","title":"Scenario","text":"<p>You want to create K-Folds for cross-validation on a dataset.</p>"},{"location":"examples/#code_4","title":"Code","text":"<pre><code>from suraj_datalab.fold_creator import create_kfolds\n\n# Create K-Folds for a dataset\nkfold_data = create_kfolds(file_path=\"your_dataset.csv\", n_splits=5, shuffle=True, random_state=42)\nprint(kfold_data.head())\n</code></pre>"},{"location":"examples/#expected-output_4","title":"Expected Output","text":"<p>A new CSV file with an additional <code>kfold</code> column indicating the fold assignment for each row in the dataset.</p> <pre><code>   Feature1  Feature2  kfold\n0       ...       ...      0\n1       ...       ...      1\n2       ...       ...      4\n3       ...       ...      3\n4       ...       ...      2\n</code></pre>"},{"location":"examples/#example-6-stratified-k-folds-for-classification","title":"Example 6: Stratified K-Folds for Classification","text":""},{"location":"examples/#scenario_5","title":"Scenario","text":"<p>You want to create stratified K-Folds for a classification problem to ensure balanced folds.</p>"},{"location":"examples/#code_5","title":"Code","text":"<pre><code>from suraj_datalab.fold_creator import create_classification_kfolds\n\n# Create Stratified K-Folds for a classification dataset\nstratified_classification_data = create_classification_kfolds(\n    file_path=\"your_dataset.csv\", target_column=\"target\", n_splits=5, random_state=42\n)\nprint(stratified_classification_data.head())\n</code></pre>"},{"location":"examples/#expected-output_5","title":"Expected Output","text":"<p>A new CSV file with an additional <code>kfold</code> column indicating the fold assignment, stratified by the target variable.</p> <pre><code>   Feature1  Feature2  target  kfold\n0       ...       ...      0      1\n1       ...       ...      1      3\n2       ...       ...      0      4\n3       ...       ...      1      0\n4       ...       ...      1      2\n</code></pre>"},{"location":"examples/#example-7-stratified-k-folds-for-regression-with-sturges-binning","title":"Example 7: Stratified K-Folds for Regression with Sturges' Binning","text":""},{"location":"examples/#scenario_6","title":"Scenario","text":"<p>You want to create stratified K-Folds for a regression problem using Sturges' binning method.</p>"},{"location":"examples/#code_6","title":"Code","text":"<pre><code>from suraj_datalab.fold_creator import create_regression_kfolds\n\n# Create Stratified K-Folds for a regression dataset using 'sturges' binning method\nstratified_regression_data = create_regression_kfolds(\n    file_path=\"your_dataset.csv\", target_column=\"target\", n_splits=5, binning_method='sturges', random_state=42\n)\nprint(stratified_regression_data.head())\n</code></pre>"},{"location":"examples/#expected-output_6","title":"Expected Output","text":"<p>A new CSV file with an additional <code>kfold</code> column indicating the fold assignment, with the target variable stratified using Sturges' binning method.</p> <pre><code>   Feature1  Feature2  target  kfold\n0       ...       ...    1.5      1\n1       ...       ...    2.1      3\n2       ...       ...    3.4      0\n3       ...       ...    2.9      4\n4       ...       ...    3.8      2\n</code></pre>"},{"location":"examples/#learn-more","title":"Learn More","text":"<p>For detailed usage instructions, please visit the Usage Guide.</p> <p>For more information about my work, other projects, or to get in touch, visit my personal website</p> <p>If you have any feedback or suggestions, feel free to open an issue on GitHub.</p>"},{"location":"usage/","title":"Usage","text":"<p>This document provides a guide on how to use the <code>suraj_datalab</code> package for data analysis.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>Ensure that you have all the necessary dependencies installed by running:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"usage/#importing-the-package","title":"Importing the Package","text":"<p>To use the <code>suraj_datalab</code> package in your Python script, you need to import it as follows:</p> <pre><code>from suraj_datalab import analyze, clean, fold_creator\n</code></pre>"},{"location":"usage/#analyzing-categorical-features","title":"Analyzing Categorical Features","text":"<p>The <code>categorical_feature</code> function allows you to analyze the distribution of a categorical feature with respect to a target variable. This function is useful for understanding how different categories are distributed and how they relate to the target variable.</p>"},{"location":"usage/#example-usage","title":"Example Usage","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Load your dataset\ndf = pd.read_csv('your_dataset.csv')\n\n# Analyze a categorical feature\ndistribution = analyze.categorical_feature(df, 'feature_name', 'target_name')\nprint(distribution)\n</code></pre>"},{"location":"usage/#output","title":"Output","text":"<p>The output is a DataFrame showing:</p> <ul> <li>Total Count</li> <li>Total Percentage</li> <li>Percentages for each target class relative to the total</li> <li>Percentages of each target class within the feature category</li> </ul> <p>A plot is also generated, showing the distribution of the feature by the target variable.</p>"},{"location":"usage/#analyzing-numerical-features","title":"Analyzing Numerical Features","text":"<p>The <code>numerical_feature</code> function allows you to analyze the distribution of a numerical feature, with optional grouping by a target variable. This function provides detailed statistics, including outlier detection.</p>"},{"location":"usage/#example-usage_1","title":"Example Usage","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Load your dataset\ndf = pd.read_csv('your_dataset.csv')\n\n# Analyze a numerical feature\noutliers_df, summary_df = analyze.numerical_feature(df, 'numerical_feature_name', 'target_name')\nprint(outliers_df)\nprint(summary_df)\n</code></pre>"},{"location":"usage/#output_1","title":"Output","text":"<p>The function returns:</p> <ul> <li><code>outliers_df</code>: A DataFrame containing the percentage of outliers.</li> <li><code>summary_df</code>: A DataFrame with overall statistics, as well as statistics for lower and upper outliers.</li> </ul> <p>A histogram and boxplot are also generated to visualize the distribution.</p>"},{"location":"usage/#missing-values-summary","title":"Missing Values Summary","text":"<p>The <code>missing_values</code> function generates a summary of missing values in the DataFrame.</p>"},{"location":"usage/#example-usage_2","title":"Example Usage","text":"<pre><code>import pandas as pd\nfrom suraj_datalab import analyze\n\n# Load your dataset\ndf = pd.read_csv('your_dataset.csv')\n\n# Get missing values summary\nmissing_summary = analyze.missing_values(df)\nprint(missing_summary)\n</code></pre>"},{"location":"usage/#output_2","title":"Output","text":"<p>The function returns a DataFrame with the following information:</p> <ul> <li>Count of missing values</li> <li>Percentage of missing values</li> <li>Data type of each column that has missing values</li> </ul>"},{"location":"usage/#handling-rare-categories-in-categorical-features","title":"Handling Rare Categories in Categorical Features","text":"<p>The <code>RareCategoryReplacer</code> class in <code>clean.py</code> is used to replace rare categories in specified columns of a DataFrame with a replacement value.</p>"},{"location":"usage/#example-usage_3","title":"Example Usage","text":"<pre><code>import pandas as pd\nfrom suraj_datalab.clean import RareCategoryReplacer\n\n# Load your dataset\ndf = pd.read_csv('your_dataset.csv')\n\n# Define the columns to replace rare categories in\ncolumns_to_replace = ['feature_1', 'feature_2']\n\n# Create an instance of the RareCategoryReplacer\nreplacer = RareCategoryReplacer(columns=columns_to_replace, proportion_threshold=0.02, replacement_value=\"Others\")\n\n# Fit and transform the dataset\ndf_transformed = replacer.fit_transform(df)\nprint(df_transformed)\n</code></pre>"},{"location":"usage/#output_3","title":"Output","text":"<p>The output is a transformed DataFrame where rare categories in the specified columns are replaced with the value \"Others\".</p>"},{"location":"usage/#creating-k-folds-for-cross-validation","title":"Creating K-Folds for Cross-Validation","text":"<p>The <code>fold_creator.py</code> script provides functions to create K-Folds for cross-validation, including standard K-Folds, stratified K-Folds for classification, and stratified K-Folds for regression tasks.</p>"},{"location":"usage/#example-usage-for-k-folds","title":"Example Usage for K-Folds","text":"<pre><code>from suraj_datalab.fold_creator import create_kfolds\n\n# Create K-Folds for a dataset\nkfold_data = create_kfolds(file_path=\"your_dataset.csv\", n_splits=5, shuffle=True, random_state=42)\nprint(kfold_data)\n</code></pre>"},{"location":"usage/#example-usage-for-stratified-k-folds-classification","title":"Example Usage for Stratified K-Folds (Classification)","text":"<pre><code>from suraj_datalab.fold_creator import create_classification_kfolds\n\n# Create Stratified K-Folds for a classification dataset\nstratified_classification_data = create_classification_kfolds(\n    file_path=\"your_dataset.csv\", target_column=\"target\", n_splits=5, random_state=42\n)\nprint(stratified_classification_data)\n</code></pre>"},{"location":"usage/#example-usage-for-stratified-k-folds-regression","title":"Example Usage for Stratified K-Folds (Regression)","text":"<pre><code>from suraj_datalab.fold_creator import create_regression_kfolds\n\n# Create Stratified K-Folds for a regression dataset using 'sturges' binning method\nstratified_regression_data = create_regression_kfolds(\n    file_path=\"your_dataset.csv\", target_column=\"target\", n_splits=5, binning_method='sturges', random_state=42\n)\nprint(stratified_regression_data)\n</code></pre>"},{"location":"usage/#output_4","title":"Output","text":"<p>Each of these functions will return a DataFrame with an additional 'kfold' column, indicating the fold assignment for each row in the dataset. The <code>create_regression_kfolds</code> function offers several methods for binning the target variable before applying stratified K-Folds, such as 'sturges', 'quantile', 'kmeans', and custom binning.</p>"},{"location":"usage/#cross-references","title":"Cross-references","text":"<p>For a general overview and more information about the project, please visit the Project Overview.</p>"},{"location":"usage/#additional-resources","title":"Additional Resources","text":"<p>For more details about my work and other projects, visit my personal website.</p> <p>If you have any questions or run into issues, please check the GitHub repository for additional help or to open an issue.</p>"}]}